{
  "timestamp": "2025-09-09T10:00:08.868284",
  "summary": {
    "tooltip_tests": "passed",
    "main_suite": "failed",
    "pytest": "failed"
  },
  "details": {
    "tooltip_tests": {
      "status": "passed",
      "total": 4,
      "passed": 4,
      "failed": 0,
      "tests": {
        "button_tooltips_exist": {
          "status": "passed",
          "details": {
            "passed": true,
            "total_buttons": 17,
            "missing_tooltips": [],
            "message": "Checked 17 buttons across 6 templates"
          }
        },
        "tooltip_consistency": {
          "status": "passed",
          "details": {
            "passed": true,
            "patterns_found": [
              "mic_button",
              "send_button",
              "other",
              "close_button",
              "action_button"
            ],
            "inconsistencies": [],
            "total_patterns": 5
          }
        },
        "accessibility_attributes": {
          "status": "passed",
          "details": {
            "passed": true,
            "accessibility_issues": [],
            "total_checked": 17
          }
        },
        "tooltip_html_structure": {
          "status": "passed",
          "details": {
            "passed": true,
            "html_issues": [],
            "files_checked": 6
          }
        }
      }
    },
    "main_suite": {
      "overall_status": "failed",
      "total_tests": 25,
      "passed_tests": 16,
      "failed_tests": 9,
      "success_rate": 64.0,
      "duration_seconds": 2.176362,
      "timestamp": "2025-09-09T10:00:04.187185",
      "categories": {
        "database_tests": {
          "status": "passed",
          "total": 8,
          "passed": 8,
          "failed": 0,
          "tests": [
            {
              "name": "database_connection",
              "status": "passed"
            },
            {
              "name": "table_interactions_exists",
              "status": "passed"
            },
            {
              "name": "table_knowledge_sources_exists",
              "status": "passed"
            },
            {
              "name": "table_content_chunks_exists",
              "status": "passed"
            },
            {
              "name": "table_user_preferences_exists",
              "status": "passed"
            },
            {
              "name": "table_personality_state_exists",
              "status": "passed"
            },
            {
              "name": "table_system_metrics_exists",
              "status": "passed"
            },
            {
              "name": "crud_operations",
              "status": "passed"
            }
          ]
        },
        "nlp_tests": {
          "status": "failed",
          "total": 4,
          "passed": 2,
          "failed": 2,
          "tests": [
            {
              "name": "spacy_model_loading",
              "status": "passed"
            },
            {
              "name": "vader_sentiment",
              "status": "failed",
              "error": "No module named 'vaderSentiment'"
            },
            {
              "name": "textblob_sentiment",
              "status": "passed"
            },
            {
              "name": "nlp_processor_integration",
              "status": "failed",
              "error": "cannot import name 'analyze_text' from 'nlp_processor' (/workspaces/projects/nlp_processor.py)"
            }
          ]
        },
        "evolution_tests": {
          "status": "failed",
          "total": 3,
          "passed": 2,
          "failed": 1,
          "tests": [
            {
              "name": "evolution_engine_init",
              "status": "passed"
            },
            {
              "name": "learning_interaction",
              "status": "failed",
              "error": "'CleverEvolutionEngine' object has no attribute 'learn_from_interaction'"
            },
            {
              "name": "evolution_status",
              "status": "passed"
            }
          ]
        },
        "persona_tests": {
          "status": "failed",
          "total": 3,
          "passed": 0,
          "failed": 3,
          "tests": [
            {
              "name": "persona_loading",
              "status": "failed",
              "error": "cannot import name 'PERSONA' from 'persona' (/workspaces/projects/persona.py)"
            },
            {
              "name": "greeting_generation",
              "status": "failed",
              "error": "cannot import name 'get_greeting' from 'persona' (/workspaces/projects/persona.py)"
            },
            {
              "name": "dynamic_response",
              "status": "failed",
              "error": "cannot import name 'get_dynamic_response' from 'persona' (/workspaces/projects/persona.py)"
            }
          ]
        },
        "file_processing_tests": {
          "status": "failed",
          "total": 2,
          "passed": 0,
          "failed": 2,
          "tests": [
            {
              "name": "file_ingestor_import",
              "status": "failed",
              "error": "cannot import name 'process_text_file' from 'file_ingestor' (/workspaces/projects/file_ingestor.py)"
            },
            {
              "name": "text_file_processing",
              "status": "failed",
              "error": "cannot import name 'process_text_file' from 'file_ingestor' (/workspaces/projects/file_ingestor.py)"
            }
          ]
        },
        "api_tests": {
          "status": "passed",
          "total": 1,
          "passed": 1,
          "failed": 0,
          "tests": [
            {
              "name": "flask_app_import",
              "status": "passed"
            }
          ]
        },
        "ui_tooltip_tests": {
          "status": "passed",
          "total": 3,
          "passed": 3,
          "failed": 0,
          "tests": [
            {
              "name": "ui_tooltip_module_import",
              "status": "passed"
            },
            {
              "name": "tooltip_functionality",
              "status": "passed",
              "details": {
                "status": "passed",
                "total": 4,
                "passed": 4,
                "failed": 0,
                "tests": {
                  "button_tooltips_exist": {
                    "status": "passed",
                    "details": {
                      "passed": true,
                      "total_buttons": 17,
                      "missing_tooltips": [],
                      "message": "Checked 17 buttons across 6 templates"
                    }
                  },
                  "tooltip_consistency": {
                    "status": "passed",
                    "details": {
                      "passed": true,
                      "patterns_found": [
                        "mic_button",
                        "send_button",
                        "other",
                        "close_button",
                        "action_button"
                      ],
                      "inconsistencies": [],
                      "total_patterns": 5
                    }
                  },
                  "accessibility_attributes": {
                    "status": "passed",
                    "details": {
                      "passed": true,
                      "accessibility_issues": [],
                      "total_checked": 17
                    }
                  },
                  "tooltip_html_structure": {
                    "status": "passed",
                    "details": {
                      "passed": true,
                      "html_issues": [],
                      "files_checked": 6
                    }
                  }
                }
              }
            },
            {
              "name": "template_files_exist",
              "status": "passed",
              "count": 6
            }
          ]
        },
        "integration_tests": {
          "status": "failed",
          "total": 1,
          "passed": 0,
          "failed": 1,
          "tests": [
            {
              "name": "full_processing_pipeline",
              "status": "failed",
              "error": "cannot import name 'analyze_text' from 'nlp_processor' (/workspaces/projects/nlp_processor.py)"
            }
          ]
        }
      }
    },
    "pytest": {
      "status": "failed",
      "stdout": "============================= test session starts ==============================\nplatform linux -- Python 3.12.11, pytest-8.4.2, pluggy-1.6.0 -- /workspaces/projects/.venv/bin/python\ncachedir: .pytest_cache\nrootdir: /workspaces/projects\ncollecting ... collected 12 items\n\ntests/test_app.py::test_health FAILED                                    [  8%]\ntests/test_app.py::test_index PASSED                                     [ 16%]\ntests/test_app.py::test_chat_happy FAILED                                [ 25%]\ntests/test_app.py::test_chat_bad_request PASSED                          [ 33%]\ntests/test_app.py::test_ingest_form PASSED                               [ 41%]\ntests/test_skills.py::test_summarize_ok PASSED                           [ 50%]\ntests/test_skills.py::test_search_empty PASSED                           [ 58%]\ntests/test_ui_tooltips.py::TestUITooltips::test_button_tooltips_exist PASSED [ 66%]\ntests/test_ui_tooltips.py::TestUITooltips::test_tooltip_consistency FAILED [ 75%]\ntests/test_ui_tooltips.py::TestUITooltips::test_accessibility_attributes PASSED [ 83%]\ntests/test_ui_tooltips.py::TestUITooltips::test_tooltip_content_quality PASSED [ 91%]\ntests/test_ui_tooltips.py::TestUITooltips::test_tooltip_html_structure PASSED [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test_health __________________________________\n\napp_client = <FlaskClient <Flask 'clever_app'>>\n\n    def test_health(app_client):\n        r = app_client.get('/health')\n        assert r.status_code == 200\n        data = r.get_json()\n>       assert data.get('status') == 'ok'\nE       assert None == 'ok'\nE        +  where None = <built-in method get of dict object at 0x720c53576400>('status')\nE        +    where <built-in method get of dict object at 0x720c53576400> = {'checks': {'database': {'issues': [], 'last_interaction': '2025-09-09T10:00:02.015649', 'size_mb': 0.26171875, 'status': 'healthy', ...}, 'evolution_engine': {'capabilities': {'conversation_handling': 0.19400000000000003, 'intent_recognition': 0.06300000000000001, 'response_generation': 0.21000000000000005, 'sentiment_understanding': 0.0018055555555555555}, 'concept_count': 52, 'connection_count': 232, 'evolution_score': 0.14506618251769554, ...}, 'nlp_components': {'components': {'spacy': {'model': 'en_core_web_sm', 'status': 'healthy', 'version': '3.8.7'}, 'textblob': {'status': 'healthy', 'test_polarity': 0.0}, 'vader': {'error': \"No module named 'vaderSentiment'\", 'status': 'error'}}, 'status': 'warning', 'timestamp': '2025-09-09T10:00:07.274173'}, 'system_resources': {'alerts': ['High memory usage: 6144.0MB'], 'cpu': {'count': 4, 'percent': 3.3}, 'disk': {'percent': 12.299730148369687, 'total_gb': 31.32598876953125, 'used_gb': 3.8530120849609375}, 'memory': {'percent': 41.0, 'process_mb': 179.99609375, 'total_mb': 15995.9765625, 'used_mb': 6144.04296875}, ...}}, 'overall_status': 'warning', 'timestamp': '2025-09-09T10:00:06.272336', 'uptime_seconds': 0.367998}.get\n\ntests/test_app.py:35: AssertionError\n----------------------------- Captured stdout call -----------------------------\n10:00:06 |     INFO | clever_ai | [HEALTH_MONITOR] Starting full health check\n10:00:07 |  WARNING | clever_ai | [HEALTH_MONITOR] System resource alerts | {\"alerts\": [\"High memory usage: 6144.0MB\"]}\n10:00:07 |     INFO | clever_ai | [HEALTH_MONITOR] Health check complete: 2/4 healthy | {\"overall_status\": \"warning\"}\n------------------------------ Captured log call -------------------------------\nINFO     clever_ai:debug_config.py:108 [HEALTH_MONITOR] Starting full health check\nWARNING  clever_ai:debug_config.py:116 [HEALTH_MONITOR] System resource alerts | {\"alerts\": [\"High memory usage: 6144.0MB\"]}\nINFO     clever_performance:debug_config.py:158 health_monitor.check_system_resources | 1.0009s | avg: 1.0009s\nINFO     clever_performance:debug_config.py:158 health_monitor.check_database_health | 0.0007s | avg: 0.0007s\nINFO     clever_performance:debug_config.py:158 health_monitor.check_nlp_components | 0.4296s | avg: 0.4296s\nINFO     clever_performance:debug_config.py:158 health_monitor.check_evolution_engine | 0.0026s | avg: 0.0026s\nINFO     clever_ai:debug_config.py:108 [HEALTH_MONITOR] Health check complete: 2/4 healthy | {\"overall_status\": \"warning\"}\nINFO     clever_performance:debug_config.py:158 health_monitor.run_full_health_check | 1.4349s | avg: 1.4349s\n_______________________________ test_chat_happy ________________________________\n\napp_client = <FlaskClient <Flask 'clever_app'>>\n\n    def test_chat_happy(app_client):\n        r = app_client.post('/chat', json={'message': 'hey clever?'})\n        assert r.status_code == 200\n        data = r.get_json()\n>       assert 'reply' in data and isinstance(data['reply'], str)\nE       AssertionError: assert ('reply' in {'analysis': {'keywords': ['hey', 'clever'], 'sentiment': 0.16666666666666666, 'user_input': 'hey clever?'}, 'approach': 'fallback', 'clever_state': {}, 'conversation_context': {}, ...})\n\ntests/test_app.py:48: AssertionError\n----------------------------- Captured stdout call -----------------------------\n\ud83c\udfad Enhanced Clever conversation engine loaded - ready for magical authentic interactions!\n10:00:08 |     INFO | clever_ai | [CONVERSATION] Enhanced Clever conversation engine initialized\n10:00:08 |    ERROR | clever_ai | [CONVERSATION] Error in process_conversation | Data: {\"duration\": \"0.0001s\", \"args_count\": 5, \"kwargs\": []} | Error: 'float' object has no attribute 'get'\n10:00:08 |    ERROR | clever_ai | Traceback: Traceback (most recent call last):\n  File \"/workspaces/projects/debug_config.py\", line 223, in wrapper\n    result = func(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^\n  File \"/workspaces/projects/clever_conversation_engine.py\", line 132, in process_conversation\n    \"particle_intensity\": self._calculate_particle_intensity(analysis, response_approach),\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/workspaces/projects/clever_conversation_engine.py\", line 497, in _calculate_particle_intensity\n    sentiment = analysis.get('sentiment', {}).get('compound', 0)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAttributeError: 'float' object has no attribute 'get'\n\n10:00:08 |  WARNING | clever_ai | [CONVERSATION] Enhanced conversation engine failed, falling back: 'float' object has no attribute 'get'\n10:00:08 |     INFO | clever_ai | [APP] Enhanced chat interaction completed successfully\n------------------------------ Captured log call -------------------------------\nINFO     clever_ai:debug_config.py:108 [CONVERSATION] Enhanced Clever conversation engine initialized\nERROR    clever_ai:debug_config.py:128 [CONVERSATION] Error in process_conversation | Data: {\"duration\": \"0.0001s\", \"args_count\": 5, \"kwargs\": []} | Error: 'float' object has no attribute 'get'\nERROR    clever_ai:debug_config.py:129 Traceback: Traceback (most recent call last):\n  File \"/workspaces/projects/debug_config.py\", line 223, in wrapper\n    result = func(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^\n  File \"/workspaces/projects/clever_conversation_engine.py\", line 132, in process_conversation\n    \"particle_intensity\": self._calculate_particle_intensity(analysis, response_approach),\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/workspaces/projects/clever_conversation_engine.py\", line 497, in _calculate_particle_intensity\n    sentiment = analysis.get('sentiment', {}).get('compound', 0)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAttributeError: 'float' object has no attribute 'get'\n\nWARNING  clever_ai:debug_config.py:116 [CONVERSATION] Enhanced conversation engine failed, falling back: 'float' object has no attribute 'get'\nINFO     clever_ai:debug_config.py:108 [APP] Enhanced chat interaction completed successfully\n___________________ TestUITooltips.test_tooltip_consistency ____________________\n\nself = <test_ui_tooltips.TestUITooltips object at 0x720c535e0e00>\ntemplate_files = [PosixPath('/workspaces/projects/templates/magical_ui.html'), PosixPath('/workspaces/projects/templates/index.html'), ...th('/workspaces/projects/templates/index_simple.html'), PosixPath('/workspaces/projects/templates/index_classic.html')]\n\n    def test_tooltip_consistency(self, template_files):\n        \"\"\"Test that similar buttons have consistent tooltip patterns\"\"\"\n        button_patterns = {}\n    \n        for template_file in template_files:\n            soup = self.parse_html_file(template_file)\n            buttons = soup.find_all('button')\n    \n            for button in buttons:\n                button_text = button.get_text(strip=True)\n                button_id = button.get('id')\n                title = button.get('title', '')\n    \n                # Group buttons by common patterns\n                if 'send' in str(button_id).lower() or '\u2b06' in button_text or '\u2728' in button_text or 'send' in button_text.lower():\n                    pattern_key = 'send_button'\n                elif 'mic' in str(button_id).lower() or '\ud83c\udfa4' in button_text:\n                    pattern_key = 'mic_button'\n                elif 'close' in str(button_id).lower() or '\u00d7' in button_text or '&times;' in str(button):\n                    pattern_key = 'close_button'\n                else:\n                    pattern_key = f\"other_{button_id or 'unnamed'}\"\n    \n                if pattern_key not in button_patterns:\n                    button_patterns[pattern_key] = []\n    \n                button_patterns[pattern_key].append({\n                    'file': template_file.name,\n                    'title': title,\n                    'button_id': button_id,\n                    'button_text': button_text\n                })\n    \n        # Check consistency within each pattern group\n        inconsistencies = []\n        for pattern, buttons in button_patterns.items():\n            if len(buttons) > 1:\n                titles = [b['title'].lower() for b in buttons if b['title']]\n                if len(set(titles)) > 1:  # More than one unique title\n                    inconsistencies.append({\n                        'pattern': pattern,\n                        'buttons': buttons,\n                        'unique_titles': list(set(titles))\n                    })\n    \n        # Allow some variation in wording but check for major inconsistencies\n        significant_inconsistencies = []\n        for inconsistency in inconsistencies:\n            titles = inconsistency['unique_titles']\n            # Check if titles are semantically similar (contain similar keywords)\n            if len(titles) > 1:\n                # For send buttons, expect variations of \"send\"\n                if inconsistency['pattern'] == 'send_button':\n                    if not all('send' in title for title in titles):\n                        significant_inconsistencies.append(inconsistency)\n                # For mic buttons, expect variations of \"voice\" or \"input\"\n                elif inconsistency['pattern'] == 'mic_button':\n                    if not all(any(word in title for word in ['voice', 'input']) for title in titles):\n                        significant_inconsistencies.append(inconsistency)\n                # For other patterns, just ensure they exist\n                else:\n                    if len([t for t in titles if t.strip()]) == 0:\n                        significant_inconsistencies.append(inconsistency)\n    \n>       assert len(significant_inconsistencies) == 0, f\"Significant tooltip inconsistencies: {significant_inconsistencies}\"\nE       AssertionError: Significant tooltip inconsistencies: [{'pattern': 'mic_button', 'buttons': [{'file': 'magical_ui.html', 'title': 'Voice input', 'button_id': 'mic-btn', 'button_text': '\ud83c\udfa4'}, {'file': 'index_classic.html', 'title': 'Talk to Clever', 'button_id': 'mic-btn', 'button_text': '\ud83c\udfa4'}], 'unique_titles': ['talk to clever', 'voice input']}]\nE       assert 1 == 0\nE        +  where 1 = len([{'buttons': [{'button_id': 'mic-btn', 'button_text': '\ud83c\udfa4', 'file': 'magical_ui.html', 'title': 'Voice input'}, {'button_id': 'mic-btn', 'button_text': '\ud83c\udfa4', 'file': 'index_classic.html', 'title': 'Talk to Clever'}], 'pattern': 'mic_button', 'unique_titles': ['talk to clever', 'voice input']}])\n\ntests/test_ui_tooltips.py:115: AssertionError\n=============================== warnings summary ===============================\n.venv/lib/python3.12/site-packages/spacy/cli/_util.py:23\n  /workspaces/projects/.venv/lib/python3.12/site-packages/spacy/cli/_util.py:23: DeprecationWarning: Importing 'parser.split_arg_string' is deprecated, it will only be available in 'shell_completion' in Click 9.0.\n    from click.parser import split_arg_string\n\n.venv/lib/python3.12/site-packages/weasel/util/config.py:8\n  /workspaces/projects/.venv/lib/python3.12/site-packages/weasel/util/config.py:8: DeprecationWarning: Importing 'parser.split_arg_string' is deprecated, it will only be available in 'shell_completion' in Click 9.0.\n    from click.parser import split_arg_string\n\ntests/test_app.py::test_chat_happy\n  /workspaces/projects/evolution_engine.py:367: UserWarning: [W007] The model you're using has no word vectors loaded, so the result of the Doc.similarity method will be based on the tagger, parser and NER, which may not give useful similarity judgements. This may happen if you're using one of the small models, e.g. `en_core_web_sm`, which don't ship with word vectors and only use context-sensitive tensors. You can always add your own word vectors, or use one of the larger models instead if available.\n    semantic_score = doc_a.similarity(doc_b)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_health - assert None == 'ok'\nFAILED tests/test_app.py::test_chat_happy - AssertionError: assert ('reply' i...\nFAILED tests/test_ui_tooltips.py::TestUITooltips::test_tooltip_consistency - ...\n=================== 3 failed, 9 passed, 3 warnings in 4.04s ====================\n",
      "stderr": ""
    }
  }
}