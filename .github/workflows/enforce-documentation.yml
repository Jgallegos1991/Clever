name: Enforce Code Documentation Standards

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  check-documentation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ast-grep flake8 black
          
      - name: Check for mandatory documentation patterns
        run: |
          echo "Checking for Why/Where/How documentation patterns..."
          
          # Check Python files for proper docstring documentation
          find . -name "*.py" -not -path "./.venv/*" -not -path "./.git/*" | while read file; do
            echo "Checking $file..."
            
            # Check for functions without proper documentation
            if grep -q "def " "$file"; then
              if ! grep -q "Why:" "$file" || ! grep -q "Where:" "$file" || ! grep -q "How:" "$file"; then
                echo "❌ Missing Why/Where/How documentation in $file"
                echo "All functions must include:"
                echo "  - Why: Purpose and reasoning"
                echo "  - Where: System connections" 
                echo "  - How: Technical implementation"
                exit 1
              fi
            fi
          done
          
      - name: Check for single database usage
        run: |
          echo "Checking for single database enforcement..."
          
          # Check for multiple database references
          if grep -r "\.db" --include="*.py" . | grep -v "clever\.db" | grep -v "DB_PATH" | grep -v "#"; then
            echo "❌ Found references to databases other than clever.db"
            echo "Only use config.DB_PATH for database operations"
            exit 1
          fi
          
      - name: Check for fallback patterns
        run: |
          echo "Checking for prohibited fallback patterns..."
          
          # Check for fallback/placeholder patterns
          if grep -r "fallback\|placeholder\|backup.*db\|if.*available" --include="*.py" . | grep -v "#.*fallback" | grep -v "graceful.*fallback"; then
            echo "❌ Found prohibited fallback patterns"
            echo "Remove all fallbacks and placeholders for full-potential operation"
            exit 1
          fi
          
      - name: Validate imports
        run: |
          echo "Checking for proper config imports..."
          
          # Check that files use centralized config
          find . -name "*.py" -not -path "./.venv/*" | while read file; do
            if grep -q "sqlite3.connect\|db_path\|database" "$file"; then
              if ! grep -q "from config import DB_PATH\|config\.DB_PATH" "$file"; then
                echo "❌ $file uses database without importing config.DB_PATH"
                echo "Always use: from config import DB_PATH"
                exit 1
              fi
            fi
          done

  format-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Check Python formatting
        run: |
          pip install black flake8
          black --check --line-length 88 .
          flake8 --max-line-length=88 --exclude=.venv,.git